#ex05Operator.py
print('4. 할당 연산자, 연산후 대입 연산자, 복합할당연산자-----')
'''
+=, -=, *=, /=, //=, %=, **=
'''
a=3
print(a)
a+=2 # a= a+2
print('a=',a) # 5
a-=1 # a=a-1  =>4
print('a=',a)
a*=3 # a= a*3  12
print('a=',a) #12
a/=5 # a = a/5
print('a=',a) # 2.4
a//=2 # a= a//2  float//int ==> float
print('a=',a) # 1.0
a=7
a**=3 # a=a**3
print('a=',a)

# ++, -- ==> 파이썬에는 x ==>  a+=1, a-=1

'''
5. 비트 연산자 : &, |, ^, ~, <<, >>
& : and연산자 : 비트로 바꾸어 연산을 한다. 두 비트가 둘다 1일때만 1이고 나머지는 0
| : or 연산자 : 두 비트 중 1개라도 1이면 1, 두 비트가 0이면 0
^ : Xor 연산자: 두 비트가 서로 다르면 1, 같으면 0
~ : 비트 부정 연산자 : 0은 1로, 1은 0으로 비트 반전을 한다
<< : Shift 연산자
>> : Shift 연산자
bit로 바꿔서 연산을 수행하고 연산 결과는 십진수로 나타낸다
'''
x=5 # 00000101
y=3 # 00000011
print(f'{x} & {y} = {x&y}')
print(f'{x} | {y} = {x|y}')
print(f'{x} ^ {y} = {x^y}') # XOR 연산자. 배타적 or연산자
'''
    5
    2...1
    1 ..0
    ---------
    3
    1...1
    
'''

a=13  # 00001101
print(bin(a)) #0b1101
#양수 13을 비트로 표현해보기
print(~a) #1은 0으로, 0은 1로 비트 반전을 한다

#   13:   00001101
# ~ 13:   11110010 ===>10 진수

'''
    13
     6 ...1
     3 ...0
     1 ...1
'''

b=-8
'''
음수값을 비트로 표현하려면? => 2의 보수

[1] 양수값을 먼저 비트로 표기한다
8: 00001000 
[2] 양수값의 1의 보수를 구한다. => 1을 0으로, 0은 1로 (비트 반전)
8의 1의 보수
 : 11110111
[3] 1의 보수값에 더하기 1을 한다 => 2의 보수

~8: 11110111 (1의 보수)
   +       1 (2의 보수)
--------------
-8: 11111000

[tip] 
 [1] 양수값-8 을 먼저 비트로 변환한다
        00001000
 [2] 하위 비트에서 첫번째 1을 만날때까지는 양수와 동일하게 써준다
      첫번째 1을 만난 이후부터는 비트를 반전한다
        11111000
'''

'''
-57을 비트로 바꿔보세요

57        00000000 00000000 00000000  00111001
28...1
14...0
 7...0
 3...1
 1...1
 ================
 -57  :   11111111 11111111 11111111 11000111
-57<<2:   111111 11111111 11111111 1100011100 

100011100 
-1*2^8+16
-256+16+8+4
 
<< : Shift 연산자. 왼쪽으로 비트수 만큼 비트를 이동시킨다. 오른쪽에 남은 빈칸은 무조건 0으로 채운다
>> : Shift 연산자. 오른쪽으로 비트수 만틈 비트를 이동시킨다. 왼쪽에 남은 빈칸은 부호비트로 채운다
                    (양수면 0으로 채우고, 음수면 1로 채운다)
                    
-57  :   11111111 11111111 11111111 11000111
-57>>2 : 11 11111111 11111111 11111111 110001  

10001  ==>-1*2^4 +1 =-15              
'''
print('-'*40)
print(-57<<2)
print(-57>>2)

print('-'*40)
print(57<<2)
print(57>>2)

'''
57 :    00000000 00000000 00000000  00111001
57<<2: 000000 00000000 00000000  00111001 00
57>>2: 00 00000000 00000000 00000000  001110 ==>>8+4+2
128+64+32+4==>228
'''









